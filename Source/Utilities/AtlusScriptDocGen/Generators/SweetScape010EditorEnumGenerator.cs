using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using AtlusScriptLibrary.Common.Libraries;

namespace AtlusScriptDocGen.Generators
{
    public class SweetScape010EditorEnumGenerator : LibraryDocumentationGenerator
    {
        private static readonly Regex sNameSanitizerRegex = new Regex(@"^[^a-zA-Z_]+|[^a-zA-Z_0-9]+", RegexOptions.Compiled);

        public SweetScape010EditorEnumGenerator(Library library) : base(library, DocumentationFormat.SweetScape010Editor)
        {
        }

        public override void Generate(string path)
        {
            var usedNames = new Dictionary<string, int>();

            string GetValidName(string name)
            {
                var validName = sNameSanitizerRegex.Replace(name, string.Empty);

                if (!usedNames.TryGetValue(validName, out var useCount))
                {
                    useCount = 1;
                }
                else
                {
                    ++useCount;
                }

                usedNames[validName] = useCount;
                if (useCount > 1)
                    validName += $"_{useCount}";

                return validName;
            }

            using (var writer = File.CreateText(path))
            {
                writer.WriteLine($"// Generated by {Program.FullName}");

                foreach (var enumDef in Library.FlowScriptModules.Where(x => x.Enums != null).SelectMany(x => x.Enums))
                {
                    if (enumDef.Description.Length != 0)
                        writer.WriteLine($"// {enumDef.Description}");

                    var enumDefName = GetValidName(enumDef.Name);

                    writer.WriteLine($"enum<short> {enumDefName}");
                    writer.WriteLine("{");
                    {
                        foreach (var enumMemberDef in enumDef.Members)
                        {
                            if (enumMemberDef.Description.Length != 0)
                                writer.WriteLine($"    // {enumMemberDef.Description}");

                            var enumMemberDefName = GetValidName(enumMemberDef.Name);

                            writer.WriteLine($"    {enumMemberDefName} = {enumMemberDef.Value},");

                            if (enumMemberDef.Description.Length != 0)
                                writer.WriteLine();
                        }
                    }
                    writer.WriteLine("};");
                    writer.WriteLine();
                }
            }
        }
    }
}
